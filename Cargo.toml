[workspace]
resolver = "2"
members = [
    "crates/polkavm-derive",
    "crates/polkavm-derive-impl",
    "crates/polkavm-derive-impl-macro",
    "crates/polkavm-linker",
    "crates/polkavm-assembler",
    "crates/polkavm-disassembler",
    "crates/polkavm-common",
    "crates/polkavm-linux-raw",
    "crates/polkavm",

    "crates/simplealloc",

    "tools/polkatool",
    "tools/polkavm-linux-raw-generate",

    "examples/doom",
    "examples/hello-world",
]

[workspace.package]
version = "0.10.0"
authors = ["Jan Bujak <jan@parity.io>", "Parity Technologies <admin@parity.io>"]
license = "MIT/Apache-2.0"
edition = "2021"
rust-version = "1.75.0"
repository = "https://github.com/koute/polkavm"

[workspace.dependencies]
polkavm                   = { version = "0.10.0", path = "crates/polkavm" }
polkavm-assembler         = { version = "0.10.0", path = "crates/polkavm-assembler" }
polkavm-disassembler      = { version = "0.10.0", path = "crates/polkavm-disassembler" }
polkavm-common            = { version = "0.10.0", path = "crates/polkavm-common" }
polkavm-derive            = { version = "0.10.0", path = "crates/polkavm-derive" }
polkavm-derive-impl       = { version = "0.10.0", path = "crates/polkavm-derive-impl" }
polkavm-derive-impl-macro = { version = "0.10.0", path = "crates/polkavm-derive-impl-macro" }
polkavm-linker            = { version = "0.10.0", path = "crates/polkavm-linker" }
polkavm-linux-raw         = { version = "0.10.0", path = "crates/polkavm-linux-raw" }

clap = "4.4.6"
env_logger = { version = "0.10.0", default-features = false }
gimli = { version = "0.28.0", default-features = false }
hashbrown = { version = "0.14.1", default-features = false }
iced-x86 = "1.20.0"
image = { version = "0.24.7", default-features = false }
libc = "0.2.149"
log = "0.4.20"
object = { version = "0.32.1", default-features = false }
proc-macro2 = "1.0.69"
proptest = "1.3.1"
quote = "1.0.33"
rustc-demangle = "0.1.23"
ruzstd = { version = "0.4.0", default-features = false }
syn = "2.0.25"

[workspace.lints.clippy]
# This also triggers on cases like `.or_insert_with(Vec::new)`.
unwrap_or_default = "allow"
get_first = "allow"
manual_range_contains = "allow"
let_unit_value = "allow"

# These are are 'allow' by default.
alloc_instead_of_core = "warn"
as_ptr_cast_mut = "warn"
as_underscore = "warn"
borrow_as_ptr = "warn"
branches_sharing_code = "warn"
cast_ptr_alignment = "warn"
clear_with_drain = "warn"
clone_on_ref_ptr = "warn"
cloned_instead_of_copied = "warn"
collection_is_never_read = "warn"
copy_iterator = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
default_union_representation = "warn"
disallowed_script_idents = "warn"
doc_link_with_quotes = "warn"
empty_line_after_doc_comments = "warn"
empty_line_after_outer_attr = "warn"
exit = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
fn_params_excessive_bools = "warn"
fn_to_numeric_cast_any = "warn"
format_push_string = "warn"
ignored_unit_patterns = "warn"
implicit_clone = "warn"
implicit_hasher = "warn"
inconsistent_struct_constructor = "warn"
index_refutable_slice = "warn"
inefficient_to_string = "warn"
# infinite_loop = "warn"
iter_not_returning_iterator = "warn"
iter_on_empty_collections = "warn"
iter_on_single_items = "warn"
# iter_over_hash_type = "warn"
large_stack_arrays = "warn"
large_stack_frames = "warn"
large_types_passed_by_value = "warn"
lossy_float_literal = "warn"
manual_instant_elapsed = "warn"
# manual_is_variant_and = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
manual_string_new = "warn"
map_unwrap_or = "warn"
match_wild_err_arm = "warn"
match_wildcard_for_single_variants = "warn"
maybe_infinite_iter = "warn"
mismatching_type_param_order = "warn"
# missing_assert_message = "warn"
missing_fields_in_debug = "warn"
mixed_read_write_in_expression = "warn"
mut_mut = "warn"
mutex_atomic = "warn"
mutex_integer = "warn"
needless_collect = "warn"
needless_for_each = "warn"
needless_pass_by_ref_mut = "warn"
needless_raw_string_hashes = "warn"
needless_raw_strings = "warn"
no_mangle_with_rust_abi = "warn"
nonstandard_macro_braces = "warn"
# option_as_ref_cloned = "warn"
partial_pub_fields = "warn"
path_buf_push_overwrite = "warn"
print_stderr = "warn"
print_stdout = "warn"
ptr_as_ptr = "warn"
ptr_cast_constness = "warn"
# pub_underscore_fields = "warn"
range_minus_one = "warn"
range_plus_one = "warn"
read_zero_byte_vec = "warn"
readonly_write_lock = "warn"
redundant_clone = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
same_name_method = "warn"
std_instead_of_core = "warn"
str_to_string = "warn"
string_add = "warn"
string_add_assign = "warn"
string_to_string = "warn"
trailing_empty_array = "warn"
trait_duplication_in_bounds = "warn"
transmute_undefined_repr = "warn"
trivially_copy_pass_by_ref = "warn"
type_repetition_in_bounds = "warn"
undocumented_unsafe_blocks = "warn"
# uninhabited_references = "warn"
unsafe_derive_deserialize = "warn"
unused_peekable = "warn"
unused_self = "warn"
use_debug = "warn"
used_underscore_binding = "warn"

cast_lossless = "deny"
expl_impl_clone_on_copy = "deny"
transmute_ptr_to_ptr = "deny"

[profile.dev.package]
hashbrown = { opt-level = 3 }
gimli = { opt-level = 3 }
image = { opt-level = 3 }
ruzstd = { opt-level = 3 }

# To speed up the tests.
polkavm-assembler = { opt-level = 3 }

[profile.release]
lto = true
codegen-units = 1
debug = true

[profile.release-lite]
inherits = "release"
lto = false
codegen-units = 8
